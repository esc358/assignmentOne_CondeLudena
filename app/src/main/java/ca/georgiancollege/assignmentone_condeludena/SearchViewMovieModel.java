/*
 * Emilio Sebastian Conde Ludena
 * 200478144
 * July 20, 2025
 * 3:20pm
 * */
package ca.georgiancollege.assignmentone_condeludena;

import android.util.Log;

import androidx.annotation.NonNull;
import androidx.lifecycle.LiveData;
import androidx.lifecycle.MutableLiveData;
import androidx.lifecycle.ViewModel;
import org.json.JSONArray;
import org.json.JSONObject;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Response;


public class SearchViewMovieModel extends ViewModel {

    //instantiate MutableLiveDate for a List of MovieModel, String
    private final MutableLiveData<List<MovieModel>> searchMovieData = new MutableLiveData<>();
    private final MutableLiveData<String> errorMessage = new MutableLiveData<>();

    public LiveData<String> getErrorMessage() { return errorMessage; }

    //method returns Live Data List of Movie Model Objects
    public LiveData<List<MovieModel>> getMoviesData(){
        return searchMovieData;
    }

    /**
     *Searches for movies using the OMDb API based on the provided movie name.
     * This method validates the search input and constructs a URL to fetch
     * movie data using OkHttp.
     * The resulting data is posted to LiveData observers.
     *
     * @param name The name of the movie to search for. Must not be empty.
     *
     */
    public void MovieSearch(String name){

        //Strings needed to construct URL
        String url = "https://www.omdbapi.com/?apikey=";
        String apiKey = "e5317c7e";
        String searchMovie = "&s=";
        String searchID = "&i=";
        String movieType = "&type=movie";

        //check if name is empty
        if (name.isEmpty())
        {
            //Display error
            errorMessage.postValue("Search a movie name. Cannot be empty.");
        }else{
            //change error message to null
            errorMessage.postValue(null);
            //construct the String for urlSearchMovies
            String urlSearchMovies = url + apiKey + searchMovie + name + movieType;

            Log.i("Tag",urlSearchMovies);
            //call method from APIClient and pass url, newCallback
            ApiClient.get(urlSearchMovies, new Callback() {
                @Override
                public void onFailure(@NonNull Call call, @NonNull IOException e) {
                    errorMessage.postValue("Error: " + e.getMessage());
                }

                //onResponse method generated by Callback
                @Override
                public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
                    //assign the response body as string to a String variable
                    String responseData = response.body().string();

                    //Instantiate a null JSONObject
                    JSONObject jsonMovieSearch = null;

                    //try catch block
                    try{
                        //instantiate the JSONObject and pass the string response data
                        jsonMovieSearch = new JSONObject(responseData);
                        //get Response from API call and assign it to variable
                        String responseJSONString = jsonMovieSearch.getString("Response");

                        //check if response is False
                        if(responseJSONString.equals("False")){
                            //get Error from API call and assign it to variable
                            String errorString =jsonMovieSearch.getString("Error");
                            //change error message to error String and return function
                            errorMessage.postValue(errorString);
                            return;
                        }

                        //since Search is a JSONArray instantiate a JsonArray
                        JSONArray moviesJSONArray = jsonMovieSearch.getJSONArray("Search");
                        //create an array list of MovieModel
                        List<MovieModel> movieList = new ArrayList<>();

                        //loop through the json array of movies
                        for (int i = 0; i < moviesJSONArray.length(); i++) {
                            //create a JSON object and pass the location of iteration
                            JSONObject movie = moviesJSONArray.getJSONObject(i);

                            //From the Movie Search this fields are available, type is ignored since it is specified in String urlSearchMovies
                            String title  = movie.getString("Title");
                            String year = movie.getString("Year");
                            String imdbID = movie.getString("imdbID");
                            String poster = movie.getString("Poster");

                            //instantiate a Movie Model
                            MovieModel movieModel = new MovieModel();
                            //set title, year and poster in MovieModel object
                            movieModel.setTitle(title);
                            movieModel.setYear(year);
                            movieModel.setPoster(poster);

                            //String to search urlMovieTitle using the imdbID
                            String urlMovieTitle = url + apiKey + searchID + imdbID + movieType;

                            //ApiClient.get instantiate passing urlMovieTitle
                            ApiClient.get(urlMovieTitle, new Callback() {
                                @Override
                                public void onFailure(@NonNull Call call, @NonNull IOException e) {
                                }
                                @Override
                                public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
                                    //assign response to String
                                    String responseData = response.body().string();
                                    //initialize a null JSONObject
                                    JSONObject jsonMovieInfo = null;

                                    try {
                                        //assign a new JSONObject passing the responseData
                                        jsonMovieInfo = new JSONObject(responseData);

                                        //get as string from json object the following
                                        String studio = jsonMovieInfo.getString("Production");
                                        String released = jsonMovieInfo.getString("Released");
                                        String runTime = jsonMovieInfo.getString("Runtime");
                                        String director = jsonMovieInfo.getString("Director");
                                        String actor = jsonMovieInfo.getString("Actors");
                                        String plot = jsonMovieInfo.getString("Plot");

                                        //in the movieModel set and passed the string above
                                        movieModel.setStudio(studio);
                                        movieModel.setReleased(released);
                                        movieModel.setRunTime(runTime);
                                        movieModel.setDirector(director);
                                        movieModel.setActors(actor);
                                        movieModel.setPlot(plot);

                                        //assign value when not available
                                        String ratingValue = "N/A";

                                        //in movie mode set rating value
                                        movieModel.setRatingValue(ratingValue);

                                        //checks if object has a mapping for Ratings
                                        if (jsonMovieInfo.has("Ratings")) {
                                            //instantiate a JSONArray and assign ratings as array
                                            JSONArray ratingsJSONArray = jsonMovieInfo.getJSONArray("Ratings");

                                            //check for rating length greater than 0
                                            if (ratingsJSONArray.length() > 0) {
                                                // Get the first rating object
                                                JSONObject ratingObj = ratingsJSONArray.getJSONObject(0);
                                                // Safely extract "Value" with a fallback
                                                ratingValue = ratingObj.getString("Value");
                                                movieModel.setRatingValue(ratingValue);
                                            }
                                        }
                                    } catch (Exception e) {
                                        throw new RuntimeException(e);
                                    }
                                    //for each iteration sync movieList must be used because of Callback
                                    synchronized (movieList) {
                                        //add movieModel object to movieList
                                        movieList.add(movieModel);
                                        //check if size of list is equal to size of movieSearch
                                        if (movieList.size() == moviesJSONArray.length()) {
                                            //post the list to LiveData
                                            searchMovieData.postValue(movieList);
                                        }
                                    }
                                }
                            });
                        }
                    } catch (Exception e) {
                        throw new RuntimeException(e);
                    }
                }
            });
        }
    }
}
